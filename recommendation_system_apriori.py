# -*- coding: utf-8 -*-
"""Recommendation-System-Apriori.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ghs6bTEnnSqNSqk4jG5_eoXBaeL5vNC
"""

!pip install apyori

import numpy as np
import pandas as pd
# from mlxtend.frequent_patterns import apriori, association_rules
from apyori import apriori
import random

data = pd.read_csv('/content/drive/MyDrive/Market_Basket_Optimisation.csv', header=None)
data = data.fillna(0)
data.head()

temperature_list = []
for i in range(0,7501):
    temperature = random.randint(1,60)
    formatted_temp = str(temperature).zfill(2)
    temperature_list.append(formatted_temp)

data.insert(0,"temp",temperature_list)

season_list = []

def tempToSeasons(temp_data):
    season_category = str()
    if temp_data<=0:
        season_category = "Extreme Cold"
    elif 0 < temp_data <= 10:
        season_category = "Winter"
    elif 10 < temp_data <= 20:
        season_category = "Spring"
    elif 40 > temp_data > 20:
        season_category = "Summer"
    elif temp_data >= 40:
        season_category = "Extereme Hot"
    return season_category

for i in range(0,7501):

    season_list.append(tempToSeasons(int(data['temp'][i])))

data.insert(0,"season",season_list)


data.head()

transactions = []

for i in range(0, 7501):
    transactions.append([str(data.values[i,j]) for j in range(0, 22) if str(data.values[i,j])!='0'])

def filterBySeason(seasonName):
  filtered_transactions = []
  for i in range(0,7501):
    if transactions[i][0] ==str(seasonName):
      filtered_transactions.append(transactions[i])
  return filtered_transactions


filtered_transactions = filterBySeason("Summer")

print(filtered_transactions)

for i in range(len(filtered_transactions)-1):
  del filtered_transactions[i][0:2]
print(filtered_transactions)

#create an object of apriori function and set the threshold values for metrics
rules = apriori(filtered_transactions, min_support=0.003, min_confidence=0.2, min_lift=3, min_length=2)
rules_list = list(rules)

#converting the list to a dataframe
result = pd.DataFrame(rules_list)

#save support to a separate column
support = result.support

#all four empty lists will contain the items, confidence and lift respectively.
item1 = []
item2 = []
confidence = []
lift = []

#first and second item are frozensets and it has to be converted to a list
for i in range(result.shape[0]):
    list1 = result['ordered_statistics'][i][0]
    item1.append(list(list1[0]))
    item2.append(list(list1[1]))
    confidence.append(list1[2])
    lift.append(list1[3])

#convert the lists to dataframe
item_1 = pd.DataFrame(item1)
item_2 = pd.DataFrame(item2)
conf =pd.DataFrame(confidence,columns=['Confidence'])
lift_m = pd.DataFrame(lift,columns=['Lift'])


season_list=[]

#concatenate the individual dataframes to a single dataframe
final_result = pd.concat([item_1,item_2,support,conf,lift_m,], axis=1)

#fill the missing values
final_result = final_result.fillna(value=' ')

#rename the columns
# final_result.columns = ['Item1','Item2','Item3','Item4','Item5','Support','Confidence','Lift']

for i in range (len(final_result)):
  season_list.append("Summer")

season_list = pd.DataFrame(season_list)
final_data= pd.concat([season_list,final_result],axis=1)
final_data.columns=['Season','Item1','Item2','Item3','Item4','Item5','Support','Confidence','Lift']
final_data.head(60)
# final_data = pd.concat(season_list,final_result)
# print(final_data)

from matplotlib import pyplot as plt
_df_51['Support'].plot(kind='line', figsize=(8, 4), title='Support')
plt.gca().spines[['top', 'right']].set_visible(False)

from matplotlib import pyplot as plt
_df_50.plot(kind='scatter', x='Confidence', y='Lift', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)